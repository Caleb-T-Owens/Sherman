use std::sync::Arc;

use anyhow::Result;
use arrow_array::RecordBatchIterator;
use gitbutler_command_context::CommandContext;
use lancedb::{
    arrow::{
        arrow_schema::{DataType, Field, Schema}, RecordBatchStream, SimpleRecordBatchReader
    }, index::Index, Connection
};
use tracing::instrument;

use crate::db::Hunk;

fn hunk_schema() -> Arc<Schema> {
    Arc::new(Schema::new(vec![
        Field::new("oid", DataType::Utf8, false),
        Field::new("header", DataType::Utf8, false),
        Field::new("path", DataType::Utf8, false),
        Field::new("previous_path", DataType::Utf8, true),
        Field::new(
            "vector",
            DataType::FixedSizeList(Arc::new(Field::new("item", DataType::Float32, false)), 1536),
            false,
        ),
    ]))
}

fn commit_schema() -> Arc<Schema> {
    Arc::new(Schema::new(vec![Field::new("oid", DataType::Utf8, false)]))
}

pub struct LanceHandle {
    /// The connection to the LanceDB database
    conn: Connection,
}

impl LanceHandle {
    /// Create a new connection to the LanceDB database and run any migrations
    pub async fn try_new(ctx: &CommandContext) -> Result<Self> {
        let path = ctx.project().gb_dir().join("lance").canonicalize()?;
        let db = lancedb::connect(&path.to_string_lossy()).execute().await?;
        let myself = Self { conn: db };
        // We want the tables to be created/migrated before use
        myself.create_tables().await?;
        Ok(myself)
    }

    /// Create the tables and indexes
    async fn create_tables(&self) -> Result<()> {
        // We probably will want some sort of migration system here

        let tables = self.conn.table_names().execute().await?;

        if !tables.contains(&"hunks".to_string()) {
            let table = self
                .conn
                .create_empty_table("hunks", hunk_schema())
                .execute()
                .await?;

            table
                .create_index(&["vector", "oid"], Index::Auto)
                .execute()
                .await?;
        }

        // Used to indicate which commits have been embedded
        if !tables.contains(&"commits".to_string()) {
            let table = self
                .conn
                .create_empty_table("commits", commit_schema())
                .execute()
                .await?;

            table.create_index(&["oid"], Index::Auto).execute().await?;
        }

        Ok(())
    }

    #[instrument(skip_all)]
    pub async fn upsert_many_hunks(&self, entries: &[Hunk]) -> Result<Vec<Hunk>> {
        let hunks = self.conn.open_table("hunks").execute().await?;

        hunks.merge_insert(&["oid", "header", "path", "previous_path"]).when_not_matched_insert_all().when_matched_update_all(None).execute(Box::new(RecordBatchIterator::new()))

        todo!()
    }
}

